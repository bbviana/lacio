{"version":3,"sources":["api/api.js","api/reducer.js","App/WordGraph.js","App/App.js","App/index.js","serviceWorker.js","index.js"],"names":["dominios","palavra","page","axios","get","relacionadas","dominio","significados","isNotInCollection","currentNodes","node","find","it","id","merge","priorityNodes","otherNodes","filter","receiveDominios","previousState","action","data","length","currentElements","elements","nodes","currentEdges","edges","currentClusters","clusters","palavraNode","label","context","type","newNodes","map","newEdges","source","target","push","newCluster","concat","newClusters","currentCluster","indexOf","palavraBusca","currentNode","receiveRelacionadas","dominioNode","receiveSignificados","console","log","cytoscape","use","cise","WordGraph","props","graph","React","createRef","this","onClickNode","onClickEdge","cy","container","current","style","selector","ele","on","e","renderedPosition","formattedElements","toCytoscapeFormat","remove","add","layout","name","fit","nodeRepulsion","ready","$","run","nextProps","nextState","nextContext","draw","className","ref","Component","App","state","onChangeBusca","setState","value","onSearch","stopPropagation","preventDefault","fetchDominios","nextPage","onClickPalavra","onClickDominio","fetchRelacionadas","edge","fetchSignificados","api","then","reducer","newState","clearSignificados","document","addEventListener","buscaValue","Header","onSubmit","autoFocus","onChange","Significados","i","key","join","texto","score","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.ed9a4e2a.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst dominios = (palavra, page) => {\n    return axios.get(`/api/dominios/${palavra}/${page}`);\n};\n\nconst relacionadas = (dominio, palavra, page) => {\n    return axios.get(`/api/relacionadas/${dominio}/${palavra}/${page}`);\n};\n\nconst significados = (dominio, palavra) => {\n    return axios.get(`/api/significados/${dominio}/${palavra}`);\n};\n\nexport default {\n    dominios,\n    relacionadas,\n    significados\n}","const isNotInCollection = currentNodes => node => !currentNodes.find(it => it.id === node.id);\n\n/**\n * Retorna um array contendo os elementos de priorityNodes mais os elementos de otherNodes que nÃ£o estejam no primeiro\n */\nconst merge = (priorityNodes, otherNodes) => {\n    return [\n        ...priorityNodes,\n        ...otherNodes.filter(isNotInCollection(priorityNodes))\n    ];\n};\n\nconst receiveDominios = (previousState, action) => {\n    const {palavra, page, data} = action;\n\n    if (data.length === 0) {\n        return previousState;\n    }\n\n    const currentElements = previousState.elements;\n\n    const currentNodes = currentElements.nodes;\n    const currentEdges = currentElements.edges;\n    const currentClusters = currentElements.clusters;\n\n    const palavraNode = {\n        id: `p_${palavra}`,\n        label: palavra,\n        context: palavra,\n        type: 'palavra',\n        page: page\n    };\n\n    const dominiosNodes = data.map(it => ({\n        id: `d_${it}`,\n        label: it,\n        context: palavra,\n        type: 'dominio'\n    }));\n\n    const newNodes = dominiosNodes\n        .filter(isNotInCollection(currentNodes));\n\n    const newEdges = newNodes\n        .map(it => ({\n            source: palavraNode.id,\n            target: it.id,\n            palavra: palavraNode.label,\n            dominio: it.label,\n        }));\n\n    newNodes.push(palavraNode);\n\n    const newCluster = [].concat(palavraNode.id, newEdges.map(it => it.target));\n    const newClusters = [];\n\n    for (const currentCluster of currentClusters) {\n        if (currentCluster.indexOf(palavraNode.id) === -1) {\n            newClusters.push(currentCluster);\n            continue;\n        }\n\n        if (page === 1) {\n            newClusters.push(newCluster);\n            newClusters.push(currentCluster.filter(it => it !== palavraNode.id))\n        } else { // page >= 2\n            newClusters.push([...currentCluster, ...newCluster]);\n        }\n    }\n\n    if (currentClusters.length === 0) {\n        newClusters.push(newCluster);\n    }\n\n    return {\n        palavraBusca: \"\",\n        currentNode: palavra,\n        elements: {\n            nodes: merge(newNodes, currentNodes),\n            edges: newEdges.concat(currentEdges),\n            clusters: newClusters\n        }\n    }\n};\n\nconst receiveRelacionadas = (previousState, action) => {\n    const {dominio, palavra, page, data} = action;\n\n    if (data.length === 0) {\n        return previousState;\n    }\n\n    const currentElements = previousState.elements;\n\n    const currentNodes = currentElements.nodes;\n    const currentEdges = currentElements.edges;\n    const currentClusters = currentElements.clusters;\n\n    const dominioNode = {\n        id: `d_${dominio}`,\n        label: dominio,\n        context: dominio,\n        type: 'dominio',\n        page: page\n    };\n\n    const palavrasNodes = data\n        .concat(palavra)\n        .map(it => ({\n            id: `p_${it}`,\n            label: it,\n            context: dominio,\n            type: 'palavra'\n        }));\n\n    const newNodes = palavrasNodes\n        .filter(isNotInCollection(currentNodes));\n\n    const newEdges = newNodes\n        .map(it => ({\n            source: dominioNode.id,\n            target: it.id,\n            palavra: it.label,\n            dominio: dominioNode.label,\n        }));\n\n    newNodes.push(dominioNode);\n\n    const newCluster = [].concat(dominioNode.id, newEdges.map(it => it.target));\n    const newClusters = [];\n\n    for (const currentCluster of currentClusters) {\n        if (currentCluster.indexOf(dominioNode.id) === -1) {\n            newClusters.push(currentCluster);\n            continue;\n        }\n\n        if (page === 1) {\n            newClusters.push(newCluster);\n            newClusters.push(currentCluster.filter(it => it !== dominioNode.id))\n        } else { // page >= 2\n            newClusters.push([...currentCluster, ...newCluster]);\n        }\n    }\n\n    if (currentClusters.length === 0) {\n        newClusters.push(newCluster);\n    }\n\n    return {\n        currentNode: dominio,\n        elements: {\n            nodes: merge(newNodes, currentNodes),\n            edges: newEdges.concat(currentEdges),\n            clusters: newClusters\n        }\n    };\n};\n\nconst receiveSignificados = (previousState, action) => {\n    const {data} = action;\n\n    console.log(data, \"receiveSignificados\");\n\n    return {\n        significados: data\n    }\n\n};\n\nexport default {\n    receiveDominios,\n    receiveRelacionadas,\n    receiveSignificados\n};","import React, {Component} from 'react';\nimport cise from 'cytoscape-cise';\nimport cytoscape from 'cytoscape';\n\n// registra layout\ncytoscape.use(cise);\n\nclass WordGraph extends Component {\n\n    constructor(props) {\n        super(props);\n        this.graph = React.createRef();\n    }\n\n    componentDidMount() {\n        const {onClickNode, onClickEdge} = this.props;\n\n        this.cy = cytoscape({\n            container: this.graph.current,\n            elements: [],\n            style: [\n                {\n                    selector: 'node',\n                    style: {\n                        'background-color': ele => ele.data('type') === 'dominio' ? '#CCC' : 'green',\n                        'label': 'data(label)'\n                    }\n                },\n\n                {\n                    selector: 'edge',\n                    style: {\n                        'width': 3,\n                        'line-color': '#ccc'\n                    }\n                }\n            ]\n        });\n\n        this.cy.on('tap', 'node', function () {\n            onClickNode(this);\n        });\n\n        this.cy.on('tap', 'edge', function (e) {\n            console.log(e.renderedPosition);\n            onClickEdge(this);\n        });\n    }\n\n    draw(context, elements) {\n        if (!this.cy) return;\n\n        const formattedElements = toCytoscapeFormat(elements);\n\n        console.log(formattedElements.nodes);\n\n        // removemos nÃ³s anteriores, pois podemos ter alterado alguma meta informaÃ§Ã£o deles e queremos sobrescrever\n        this.cy.remove('node');\n        this.cy.add(formattedElements);\n\n        this.cy.layout({\n            name: 'cise',\n            // animate: 'end', // true atrapalha cy.fit()\n            fit: false,\n            // allowNodesInsideCircle: true,\n            nodeRepulsion: 5,\n            clusters: formattedElements.clusters, // clusters sÃ£o os grupos do cise layout: os cÃ­rculos\n            ready: () => {\n                // faz o viewport exibir os nodes do contexto atual, i.e, a Ã­ltima palavra escolhida\n                this.cy.fit(this.cy.$(`[context='${context}']`));\n            }\n        }).run();\n    }\n\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return this.props.elements !== nextProps.elements;\n    }\n\n    render() {\n        const {context, elements} = this.props;\n\n        // FIXME usar um callback adequado\n        this.draw(context, elements);\n\n        return (\n            <div className=\"WordGraph\" ref={this.graph}/>\n        );\n    }\n}\n\nconst toCytoscapeFormat = ({nodes, edges, clusters}) => ({\n    nodes: nodes.map(it => ({data: it})),\n    edges: edges.map(it => ({data: it})),\n    clusters,\n});\n\n\nexport default WordGraph;","import React, {Component} from 'react';\nimport {api, reducer} from '../api';\nimport WordGraph from \"./WordGraph\";\n\nimport './App.css';\nimport * as PropTypes from \"prop-types\";\n\nclass App extends Component {\n    state = {\n        palavraBusca: \"\",\n        currentNode: null,\n        elements: {\n            nodes: [],\n            edges: [],\n            clusters: [], // para o cise layout\n        },\n        significados: []\n    };\n\n    componentDidMount() {\n        document.addEventListener(\"click\", () => this.clearSignificados())\n    }\n\n    onChangeBusca = e => {\n        this.setState({palavraBusca: e.target.value})\n    };\n\n    onSearch = e => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const {palavraBusca} = this.state;\n\n        this.fetchDominios(palavraBusca, 1);\n    };\n\n\n    onClickNode = node => {\n        const currentPage = node.data(\"page\") || 0;\n        const nextPage = currentPage + 1;\n\n        const isPalavra = node.data('type') === 'palavra';\n        isPalavra ? this.onClickPalavra(node, nextPage) : this.onClickDominio(node, nextPage)\n    };\n\n    onClickPalavra = (node, page) => {\n        const palavra = node.data(\"label\");\n        this.fetchDominios(palavra, page);\n    };\n\n    onClickDominio = (node, page) => {\n        const dominio = node.data(\"label\");\n        const palavra = node.data(\"context\");\n        this.fetchRelacionadas(dominio, palavra, page);\n    };\n\n    onClickEdge = edge => {\n        const dominio = edge.data(\"dominio\");\n        const palavra = edge.data(\"palavra\");\n        this.fetchSignificados(dominio, palavra);\n    };\n\n    fetchDominios = (palavra, page) => {\n        api.dominios(palavra, page)\n            .then(({data}) => reducer.receiveDominios(this.state, {\n                palavra,\n                page,\n                data\n            }))\n            .then(newState => this.setState(newState));\n    };\n\n    fetchRelacionadas = (dominio, palavra, page) => {\n        api.relacionadas(dominio, palavra, page)\n            .then(({data}) => reducer.receiveRelacionadas(this.state, {\n                palavra,\n                dominio,\n                page,\n                data\n            }))\n            .then(newState => this.setState(newState));\n    };\n\n    fetchSignificados = (dominio, palavra) => {\n        api.significados(dominio, palavra)\n            .then(({data}) => reducer.receiveSignificados(this.state, {\n                data\n            }))\n            .then(newState => this.setState(newState));\n    };\n\n    clearSignificados = () => this.setState({significados: []});\n\n    render() {\n        const {palavraBusca, currentNode, elements, significados} = this.state;\n\n        return (\n            <div className=\"App\">\n                <Header buscaValue={palavraBusca}\n                        onChangeBusca={this.onChangeBusca}\n                        onSearch={this.onSearch}/>\n\n                <div className=\"content\">\n                    {significados.length > 0 &&\n                    <Significados value={significados}/>}\n\n                    <WordGraph context={currentNode}\n                               elements={elements}\n                               onClickNode={this.onClickNode}\n                               onClickEdge={this.onClickEdge}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst Header = ({buscaValue, onChangeBusca, onSearch}) => {\n    return (\n        <div className=\"Header\">\n            <span className=\"title\">LÃ¡cio</span>\n\n            <form onSubmit={onSearch}>\n                <input type=\"text\"\n                       value={buscaValue}\n                       autoFocus\n                       onChange={onChangeBusca}\n                />\n                <input type=\"submit\" value=\"Buscar\"/>\n            </form>\n        </div>\n    )\n};\n\nclass Significados extends Component {\n\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    componentDidMount() {\n        this.ref.current.addEventListener('click', e => e.stopPropagation());\n    }\n\n    render() {\n        let {value} = this.props;\n\n        return (\n            <div className=\"Significados\" ref={this.ref}>\n                <div className=\"title\">Significados</div>\n\n                {value.map((it, i) =>\n                    <div className=\"significado\" key={i}>\n                        <span className=\"index\">{i + 1}.</span>\n\n                        {it.dominios.length > 0 &&\n                        <span className=\"dominios\">{it.dominios.join(\", \")}</span>}\n\n                        <span className=\"texto\">{it.texto}</span>\n                        {it.score > 0 &&\n\n                        <span className=\"score\">{it.score}</span>}\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nSignificados.propTypes = {value: PropTypes.any}\n\n\nexport default App;\n","import App from './App';\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}